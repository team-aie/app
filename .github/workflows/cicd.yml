name: CI/CD

on:
  push:
    branches: '**'

jobs:
  find-release-version:
    name: Find Release Version
    runs-on: ubuntu-latest
    steps:
      - name: Legacy Checkout Source Code
        uses: actions/checkout@v1
      - run: git tag -l
      - name: Use Node.js 12.16.2
        uses: actions/setup-node@v1
        with:
          node-version: 12.16.2
      - name: Detect New Version
        id: find-new-version
        run: |
          npm i -D conventional-changelog-angular conventional-recommended-bump
          npm version --allow-same-version --no-git-tag-version $(npx conventional-recommended-bump -p angular) \
            | sed 's/[v]//g' > NEXT_VERSION
      - run: cat NEXT_VERSION
      - name: Upload Version Number
        uses: actions/upload-artifact@v1
        with:
          # We add ".zip" to the artifact name because GitHub puts artifacts into zip files before uploading
          name: NEXT_VERSION.zip
          path: NEXT_VERSION

  # On Windows hosts, electron builder hangs, so we fall back to using macOS host
  build-win:
    name: Build Windows App
    needs: find-release-version
    runs-on: macos-latest
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v2
      - name: Use Node.js 12.16.2
        uses: actions/setup-node@v1
        with:
          node-version: 12.16.2
      - name: Download Version Number
        uses: actions/download-artifact@v1
        with:
          name: NEXT_VERSION.zip
      - name: Find New Version
        id: find-new-version
        run: |
          NEW_RELEASE_VERSION=$(cat NEXT_VERSION.zip/NEXT_VERSION)
          rm -r NEXT_VERSION.zip
          echo "::set-output name=new_release_version::${NEW_RELEASE_VERSION}"
      - name: Use New Version
        run: npm version --allow-same-version --no-git-tag-version ${{ steps.find-new-version.outputs.new_release_version }}
      - name: Install Wine via Homebrew
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
          brew cask install xquartz wine-stable
      - run: npm ci
      - run: npm run lint
      - run: npm run compile
      - run: npm run test
      - name: Fast Package App
        run: npm run dist:win -- -p never
        env:
          FAST_PACKAGING: true
      - name: Package Production App
        if: github.ref == 'refs/heads/master'
        run: npm run dist:win -- -p never
      - name: Upload Packaged App
        uses: actions/upload-artifact@v1
        with:
          name: aie-setup-${{ steps.find-new-version.outputs.new_release_version }}.exe.zip
          path: dist/aie-setup-${{ steps.find-new-version.outputs.new_release_version }}.exe
      - name: Upload Packaged Zip
        uses: actions/upload-artifact@v1
        with:
          name: aie-${{ steps.find-new-version.outputs.new_release_version }}-win.zip.zip
          path: dist/aie-${{ steps.find-new-version.outputs.new_release_version }}-win.zip
      - name: Upload Blockmap
        uses: actions/upload-artifact@v1
        with:
          name: aie-setup-${{ steps.find-new-version.outputs.new_release_version }}.exe.blockmap.zip
          path: dist/aie-setup-${{ steps.find-new-version.outputs.new_release_version }}.exe.blockmap
      - name: Upload AutoUpdate Metadata
        uses: actions/upload-artifact@v1
        with:
          name: latest.yml.zip
          path: dist/latest.yml

  build-macos:
    name: Build macOS App
    needs: find-release-version
    runs-on: macos-latest
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v2
      - name: Use Node.js 12.16.2
        uses: actions/setup-node@v1
        with:
          node-version: 12.16.2
      - name: Download Version Number
        uses: actions/download-artifact@v1
        with:
          name: NEXT_VERSION.zip
      - name: Find New Version
        id: find-new-version
        run: |
          NEW_RELEASE_VERSION=$(cat NEXT_VERSION.zip/NEXT_VERSION)
          rm -r NEXT_VERSION.zip
          echo "::set-output name=new_release_version::${NEW_RELEASE_VERSION}"
      - name: Use New Version
        run: npm version --allow-same-version --no-git-tag-version ${{ steps.find-new-version.outputs.new_release_version }}
      - run: npm ci
      - run: npm run lint
      - run: npm run compile
      - run: npm run test
      - name: Fast Package App
        run: npm run dist:macos -- -p never
        env:
          FAST_PACKAGING: true
      - name: Package Production App
        if: github.ref == 'refs/heads/master'
        run: npm run dist:macos -- -p never
      - name: Upload Packaged App
        uses: actions/upload-artifact@v1
        with:
          name: aie-${{ steps.find-new-version.outputs.new_release_version }}.dmg.zip
          path: dist/aie-${{ steps.find-new-version.outputs.new_release_version }}.dmg
      - name: Upload Packaged Zip
        uses: actions/upload-artifact@v1
        with:
          name: aie-${{ steps.find-new-version.outputs.new_release_version }}-mac.zip.zip
          path: dist/aie-${{ steps.find-new-version.outputs.new_release_version }}-mac.zip
      - name: Upload Blockmap
        uses: actions/upload-artifact@v1
        with:
          name: aie-${{ steps.find-new-version.outputs.new_release_version }}.dmg.blockmap.zip
          path: dist/aie-${{ steps.find-new-version.outputs.new_release_version }}.dmg.blockmap
      - name: Upload AutoUpdate Metadata
        uses: actions/upload-artifact@v1
        with:
          name: latest-mac.yml.zip
          path: dist/latest-mac.yml

  build-linux:
    name: Build Linux App
    needs: find-release-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v2
      - name: Use Node.js 12.16.2
        uses: actions/setup-node@v1
        with:
          node-version: 12.16.2
      - name: Download Version Number
        uses: actions/download-artifact@v1
        with:
          name: NEXT_VERSION.zip
      - name: Find New Version
        id: find-new-version
        run: |
          NEW_RELEASE_VERSION=$(cat NEXT_VERSION.zip/NEXT_VERSION)
          rm -r NEXT_VERSION.zip
          echo "::set-output name=new_release_version::${NEW_RELEASE_VERSION}"
      - name: Use New Version
        run: npm version --allow-same-version --no-git-tag-version ${{ steps.find-new-version.outputs.new_release_version }}
      - run: npm ci
      - run: npm run lint
      - run: npm run compile
      - run: npm run test
      - name: Fast Package App
        run: npm run dist:linux -- -p never
        env:
          FAST_PACKAGING: true
      - name: Package Production App
        if: github.ref == 'refs/heads/master'
        run: npm run dist:linux -- -p never
      - name: Upload Packaged App
        uses: actions/upload-artifact@v1
        with:
          name: aie.AppImage.zip
          path: dist/aie.AppImage
      - name: Upload Packaged Zip
        uses: actions/upload-artifact@v1
        with:
          name: aie-${{ steps.find-new-version.outputs.new_release_version }}.zip.zip
          path: dist/aie-${{ steps.find-new-version.outputs.new_release_version }}.zip
      - name: Upload AutoUpdate Metadata
        uses: actions/upload-artifact@v1
        with:
          name: latest-linux.yml.zip
          path: dist/latest-linux.yml

  create-release:
    name: Semantic Release
    if: github.ref == 'refs/heads/master'
    needs: [build-win, build-macos, build-linux]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v2
        with:
          # https://github.com/semantic-release/git/issues/196#issuecomment-601310576
          persist-credentials: false
      - name: Download Version Number
        uses: actions/download-artifact@v1
        with:
          name: NEXT_VERSION.zip
      - name: Find New Version
        id: find-new-version
        run: |
          NEW_RELEASE_VERSION=$(cat NEXT_VERSION.zip/NEXT_VERSION)
          rm -r NEXT_VERSION.zip
          echo "::set-output name=new_release_version::${NEW_RELEASE_VERSION}"
      - name: Prepare Dist Folder
        run: mkdir dist
      - name: Download Packaged App for Windows
        uses: actions/download-artifact@v1
        with:
          name: aie-setup-${{ steps.find-new-version.outputs.new_release_version }}.exe.zip
      - name: Download Packaged Zip for Windows
        uses: actions/download-artifact@v1
        with:
          name: aie-${{ steps.find-new-version.outputs.new_release_version }}-win.zip.zip
      - name: Download Blockmap for Windows
        uses: actions/download-artifact@v1
        with:
          name: aie-setup-${{ steps.find-new-version.outputs.new_release_version }}.exe.blockmap.zip
      - name: Download AutoUpdate Metadata for Windows
        uses: actions/download-artifact@v1
        with:
          name: latest.yml.zip
      - name: Download Packaged App for macOS
        uses: actions/download-artifact@v1
        with:
          name: aie-${{ steps.find-new-version.outputs.new_release_version }}.dmg.zip
      - name: Download Packaged Zip for macOS
        uses: actions/download-artifact@v1
        with:
          name: aie-${{ steps.find-new-version.outputs.new_release_version }}-mac.zip.zip
      - name: Download Blockmap for macOS
        uses: actions/download-artifact@v1
        with:
          name: aie-${{ steps.find-new-version.outputs.new_release_version }}.dmg.blockmap.zip
      - name: Download AutoUpdate Metadata for macOS
        uses: actions/download-artifact@v1
        with:
          name: latest-mac.yml.zip
      - name: Download Packaged App for macOS
        uses: actions/download-artifact@v1
        with:
          name: aie-${{ steps.find-new-version.outputs.new_release_version }}.dmg.zip
      - name: Download Packaged App for Linux
        uses: actions/download-artifact@v1
        with:
          name: aie.AppImage.zip
      - name: Download Packaged Zip for Linux
        uses: actions/download-artifact@v1
        with:
          name: aie-${{ steps.find-new-version.outputs.new_release_version }}.zip.zip
      - name: Download AutoUpdate Metadata for Linux
        uses: actions/download-artifact@v1
        with:
          name: latest-linux.yml.zip
      - name: Move Files to Dist Folder
        run: mv *.zip/* dist
      - name: Run Semantic Release
        uses: cycjimmy/semantic-release-action@v2
        with:
          extra_plugins: '@semantic-release/git'
        env:
          # Only PAT can be used on protected branch
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
