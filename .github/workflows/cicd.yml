name: CI/CD

on:
  push:
    branches: '**'

jobs:
  find-release-version:
    name: Find Release Version
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - run: git tag -l
      - name: Use Node.js LTS version
        uses: actions/setup-node@v3
        with:
          node-version: 16.13.1
      - name: Use Specific NPM Version
        run: npm -v && npm i -g npm@8.1.2
      - name: Detect New Version
        id: find-new-version
        run: |
          # This does not only install two dependencies - it will install all, but it doens't run postinstall.
          npm i -D conventional-changelog-angular conventional-recommended-bump
          npx conventional-recommended-bump --verbose -p angular
          npm version --allow-same-version --no-git-tag-version $(npx conventional-recommended-bump -p angular) \
            | sed 's/[v]//g' > NEXT_VERSION
      - run: cat NEXT_VERSION
      - name: Upload Version Number
        uses: actions/upload-artifact@v4
        with:
          # We add ".zip" to the artifact name because GitHub puts artifacts into zip files before uploading
          name: NEXT_VERSION.zip
          path: NEXT_VERSION

  # On Windows hosts, electron builder hangs, so we fall back to using macOS host
  build-win:
    name: Build Windows App
    needs: find-release-version
    # TODO: Look for solutions to run this on ubuntu-20.04 or newer.
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3
      - name: Use Node.js LTS version
        uses: actions/setup-node@v3
        with:
          node-version: 16.13.1
      - name: Use Specific NPM Version
        run: npm -v && npm i -g npm@8.1.2
      - name: Download All Artifacts
        uses: actions/download-artifact@v3
      - name: Find New Version
        id: find-new-version
        run: |
          NEW_RELEASE_VERSION=$(cat NEXT_VERSION.zip/NEXT_VERSION)
          rm -r NEXT_VERSION.zip
          echo "::set-output name=new_release_version::${NEW_RELEASE_VERSION}"
      - name: Use New Version
        run: npm version --allow-same-version --no-git-tag-version ${{ steps.find-new-version.outputs.new_release_version }}
      - name: Install Wine
        run: |
          sudo dpkg --add-architecture i386
          wget -qO - https://dl.winehq.org/wine-builds/winehq.key | sudo apt-key add -
          sudo add-apt-repository ppa:cybermax-dexter/sdl2-backport
          sudo apt-add-repository "deb https://dl.winehq.org/wine-builds/ubuntu $(lsb_release -cs) main"
          sudo apt install --install-recommends winehq-stable
      - run: npm ci
      - run: npm run lint
      - run: npm run compile
      - run: npm run test
      - name: Package Production App
        run: npm run dist:win -- -p never
      - name: Upload Packaged App
        uses: actions/upload-artifact@v4
        with:
          name: aie-setup-${{ steps.find-new-version.outputs.new_release_version }}.exe.zip
          path: dist/aie-setup-${{ steps.find-new-version.outputs.new_release_version }}.exe
      - name: Upload Packaged Zip
        uses: actions/upload-artifact@v4
        with:
          name: aie-${{ steps.find-new-version.outputs.new_release_version }}-win.zip.zip
          path: dist/aie-${{ steps.find-new-version.outputs.new_release_version }}-win.zip
      - name: Upload Blockmap
        uses: actions/upload-artifact@v4
        with:
          name: aie-setup-${{ steps.find-new-version.outputs.new_release_version }}.exe.blockmap.zip
          path: dist/aie-setup-${{ steps.find-new-version.outputs.new_release_version }}.exe.blockmap
      - name: Upload AutoUpdate Metadata
        uses: actions/upload-artifact@v4
        with:
          name: latest.yml.zip
          path: dist/latest.yml

  build-macos-x64-arm64:
    name: Build macOS App (x64, ARM64 untested)
    needs: find-release-version
    runs-on: macos-11
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3
      - name: Use Node.js LTS version
        uses: actions/setup-node@v3
        with:
          node-version: 16.13.1
      - name: Use Specific NPM Version
        run: npm -v && npm i -g npm@8.1.2
      - name: Download All Artifacts
        uses: actions/download-artifact@v3
      - name: Find New Version
        id: find-new-version
        run: |
          NEW_RELEASE_VERSION=$(cat NEXT_VERSION.zip/NEXT_VERSION)
          rm -r NEXT_VERSION.zip
          echo "::set-output name=new_release_version::${NEW_RELEASE_VERSION}"
      - name: Use New Version
        run: npm version --allow-same-version --no-git-tag-version ${{ steps.find-new-version.outputs.new_release_version }}
      - run: npm ci
      - run: npm run lint
      - run: npm run compile
      - run: npm run test
      - name: Package Production App (x64, ARM64 untested)
        run: npm run dist:macos -- --x64 --arm64 -p never
      - name: Upload Packaged App (x64)
        uses: actions/upload-artifact@v4
        with:
          name: aie-${{ steps.find-new-version.outputs.new_release_version }}.dmg.zip
          path: dist/aie-${{ steps.find-new-version.outputs.new_release_version }}.dmg
      - name: Upload Packaged Zip (x64)
        uses: actions/upload-artifact@v4
        with:
          name: aie-${{ steps.find-new-version.outputs.new_release_version }}-mac.zip.zip
          path: dist/aie-${{ steps.find-new-version.outputs.new_release_version }}-mac.zip
      - name: Upload Blockmap (x64)
        uses: actions/upload-artifact@v4
        with:
          name: aie-${{ steps.find-new-version.outputs.new_release_version }}.dmg.blockmap.zip
          path: dist/aie-${{ steps.find-new-version.outputs.new_release_version }}.dmg.blockmap
      - name: Upload Packaged App (ARM64 untested)
        uses: actions/upload-artifact@v4
        with:
          name: aie-${{ steps.find-new-version.outputs.new_release_version }}-arm64-untested.dmg.zip
          path: dist/aie-${{ steps.find-new-version.outputs.new_release_version }}-arm64.dmg
      - name: Upload Packaged Zip (ARM64 untested)
        uses: actions/upload-artifact@v4
        with:
          name: aie-${{ steps.find-new-version.outputs.new_release_version }}-arm64-untested-mac.zip.zip
          path: dist/aie-${{ steps.find-new-version.outputs.new_release_version }}-arm64-mac.zip
      - name: Upload Blockmap (ARM64 untested)
        uses: actions/upload-artifact@v4
        with:
          name: aie-${{ steps.find-new-version.outputs.new_release_version }}-arm64-untested.dmg.blockmap.zip
          path: dist/aie-${{ steps.find-new-version.outputs.new_release_version }}-arm64.dmg.blockmap
      - name: Upload AutoUpdate Metadata
        uses: actions/upload-artifact@v4
        with:
          name: latest-mac.yml.zip
          path: dist/latest-mac.yml

  build-macos-universal:
    name: Build macOS App (Universal untested)
    needs: find-release-version
    runs-on: macos-11
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3
      - name: Use Node.js LTS version
        uses: actions/setup-node@v3
        with:
          node-version: 16.13.1
      - name: Use Specific NPM Version
        run: npm -v && npm i -g npm@8.1.2
      - name: Download All Artifacts
        uses: actions/download-artifact@v3
      - name: Find New Version
        id: find-new-version
        run: |
          NEW_RELEASE_VERSION=$(cat NEXT_VERSION.zip/NEXT_VERSION)
          rm -r NEXT_VERSION.zip
          echo "::set-output name=new_release_version::${NEW_RELEASE_VERSION}"
      - name: Use New Version
        run: npm version --allow-same-version --no-git-tag-version ${{ steps.find-new-version.outputs.new_release_version }}
      - run: npm ci
      - run: npm run lint
      - run: npm run compile
      - run: npm run test
      - name: Package Production App (Universal untested)
        run: npm run dist:macos -- --universal -p never
      - name: Upload Packaged App (Universal untested)
        uses: actions/upload-artifact@v4
        with:
          name: aie-${{ steps.find-new-version.outputs.new_release_version }}-universal-untested.dmg.zip
          path: dist/aie-${{ steps.find-new-version.outputs.new_release_version }}-universal.dmg
      - name: Upload Packaged Zip (Universal untested)
        uses: actions/upload-artifact@v4
        with:
          name: aie-${{ steps.find-new-version.outputs.new_release_version }}-universal-untested-mac.zip.zip
          path: dist/aie-${{ steps.find-new-version.outputs.new_release_version }}-universal-mac.zip
      - name: Upload Blockmap (Universal untested)
        uses: actions/upload-artifact@v4
        with:
          name: aie-${{ steps.find-new-version.outputs.new_release_version }}-universal-untested.dmg.blockmap.zip
          path: dist/aie-${{ steps.find-new-version.outputs.new_release_version }}-universal.dmg.blockmap

  build-linux:
    name: Build Linux App
    needs: find-release-version
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3
      - name: Use Node.js LTS version
        uses: actions/setup-node@v3
        with:
          node-version: 16.13.1
      - name: Use Specific NPM Version
        run: npm -v && npm i -g npm@8.1.2
      - name: Download All Artifacts
        uses: actions/download-artifact@v3
      - name: Find New Version
        id: find-new-version
        run: |
          NEW_RELEASE_VERSION=$(cat NEXT_VERSION.zip/NEXT_VERSION)
          rm -r NEXT_VERSION.zip
          echo "::set-output name=new_release_version::${NEW_RELEASE_VERSION}"
      - name: Use New Version
        run: npm version --allow-same-version --no-git-tag-version ${{ steps.find-new-version.outputs.new_release_version }}
      - run: npm ci
      - run: npm run lint
      - run: npm run compile
      - run: npm run test
      # We don't need to run fast package because we never compress files for AppImage.
      - name: Package Production App
        run: npm run dist:linux -- -p never
      - name: Upload Packaged App
        uses: actions/upload-artifact@v4
        with:
          name: aie.AppImage.zip
          path: dist/aie.AppImage
      - name: Upload Packaged Zip
        uses: actions/upload-artifact@v4
        with:
          name: aie-${{ steps.find-new-version.outputs.new_release_version }}.zip.zip
          path: dist/aie-${{ steps.find-new-version.outputs.new_release_version }}.zip
      - name: Upload AutoUpdate Metadata
        uses: actions/upload-artifact@v4
        with:
          name: latest-linux.yml.zip
          path: dist/latest-linux.yml

  create-release:
    name: Semantic Release
    if: github.ref == 'refs/heads/master'
    needs: [build-win, build-macos-x64-arm64, build-macos-universal, build-linux]
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3
        with:
          # https://github.com/semantic-release/git/issues/196#issuecomment-601310576
          persist-credentials: false
      - name: Download All Artifacts
        uses: actions/download-artifact@v3
      - name: Find New Version
        id: find-new-version
        run: |
          NEW_RELEASE_VERSION=$(cat NEXT_VERSION.zip/NEXT_VERSION)
          rm -r NEXT_VERSION.zip
          echo "::set-output name=new_release_version::${NEW_RELEASE_VERSION}"
      - name: Prepare Dist Folder
        run: mkdir dist
      - name: Move Files to Dist Folder
        run: mv *.zip/* dist
      - name: Run Semantic Release
        uses: cycjimmy/semantic-release-action@v2
        with:
          extra_plugins: '@semantic-release/git'
        env:
          # Only PAT can be used on protected branch
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
